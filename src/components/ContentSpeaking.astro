---
import { getSortedEngagements, getAllSpeakingTags } from '../data/speaking';

// Get sorted speaking engagements and all unique tags
const sortedEngagements = getSortedEngagements();
const allTags = getAllSpeakingTags();
---

<div>
    <!-- Upcoming Engagements Section -->
    <h2 class="text-2xl font-bold mb-4 text-white">Upcoming Speaking Engagements</h2>
    <div class="grid grid-cols-1 gap-6 mb-10" id="upcoming-engagements">
        {sortedEngagements.filter(engagement => engagement.status === 'upcoming').map(engagement => (
            <div 
                class="flex flex-col justify-center items-start border border-gray-700 rounded-lg p-6 bg-black speaking-card" 
                data-tags={engagement.tags?.join(',')}
            >
                <div class="flex flex-col md:flex-row justify-between w-full">
                    <div>
                        <h3 class="text-xl font-semibold text-white mb-1">{engagement.title}</h3>
                        <p class="text-primary font-medium">{engagement.event}</p>
                    </div>
                    <div class="md:text-right mt-2 md:mt-0">
                        <p class="text-white">{engagement.date}</p>
                    </div>
                </div>
                
                {engagement.tags && engagement.tags.length > 0 && (
                    <div class="flex flex-wrap gap-1 mt-2 mb-4">
                        {engagement.tags.map(tag => (
                            <span class="tag-span inline-flex items-center justify-center px-2 py-1 text-xs rounded-lg bg-black text-gray-100 cursor-pointer transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5">
                                #{tag}
                            </span>
                        ))}
                    </div>
                )}
                
                <p class="text-gray-400 my-4">{engagement.description}</p>
                {engagement.link?.url && (
                    <a
                        href={engagement.link.url}
                        title={engagement.link.title || engagement.event}
                        target={engagement.link.target || '_blank'}
                        class="px-4 py-2.5 mt-2 text-center border border-gray-600 rounded-lg hover:text-primary hover:border-primary"
                    >
                        {engagement.link.buttonLabel || 'Event Details'}
                    </a>
                )}
            </div>
        ))}
        
        {sortedEngagements.filter(engagement => engagement.status === 'upcoming').length === 0 && (
            <div id="no-upcoming-default" class="flex flex-col justify-center items-center border border-gray-700 rounded-lg p-6 bg-black text-center">
                <p class="text-gray-400">No upcoming speaking engagements at this time.</p>
                <p class="text-gray-400 mt-2">Check back soon for updates!</p>
            </div>
        )}
        
        <div id="no-upcoming-results" class="border border-gray-700 rounded-lg p-6 bg-black text-center hidden">
            <p class="text-gray-400">No upcoming speaking engagements match your filter.</p>
            <p class="text-gray-400 mt-2">Try selecting a different tag.</p>
        </div>
    </div>
    
    <!-- Past Engagements Section -->
    <h2 class="text-2xl font-bold mb-4 mt-8 text-white">Past Speaking Engagements</h2>
    <div class="grid grid-cols-1 gap-6 mb-10" id="past-engagements">
        {sortedEngagements.filter(engagement => engagement.status === 'past').map(engagement => (
            <div 
                class="flex flex-col justify-center items-start border border-gray-700 rounded-lg p-6 bg-black speaking-card" 
                data-tags={engagement.tags?.join(',')}
            >
                <div class="flex flex-col md:flex-row justify-between w-full">
                    <div>
                        <h3 class="text-xl font-semibold text-white mb-1">{engagement.title}</h3>
                        <p class="text-primary font-medium">{engagement.event}</p>
                    </div>
                    <div class="md:text-right mt-2 md:mt-0">
                        <p class="text-white">{engagement.date}</p>
                    </div>
                </div>
                
                {engagement.tags && engagement.tags.length > 0 && (
                    <div class="flex flex-wrap gap-1 mt-2 mb-4">
                        {engagement.tags.map(tag => (
                            <span class="tag-span inline-flex items-center justify-center px-2 py-1 text-xs rounded-lg bg-black text-gray-100 cursor-pointer transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5">
                                #{tag}
                            </span>
                        ))}
                    </div>
                )}
                
                <p class="text-gray-400 my-4">{engagement.description}</p>
                {engagement.link?.url && (
                    <a
                        href={engagement.link.url}
                        title={engagement.link.title || engagement.event}
                        target={engagement.link.target || '_blank'}
                        class="px-4 py-2.5 mt-2 text-center border border-gray-600 rounded-lg hover:text-primary hover:border-primary"
                    >
                        {engagement.link.buttonLabel || 'View Details'}
                    </a>
                )}
            </div>
        ))}
        
        <div id="no-past-results" class="border border-gray-700 rounded-lg p-6 bg-black text-center hidden">
            <p class="text-gray-400">No past speaking engagements match your filter.</p>
            <p class="text-gray-400 mt-2">Try selecting a different tag.</p>
        </div>
    </div>
    
    <!-- Tag Filter Section (Moved to bottom) -->
    <div class="mt-12 pt-8 border-t border-gray-800">
        <h3 class="text-xl font-semibold mb-4 text-white">Filter by Tags</h3>
        
        <div class="flex flex-wrap gap-2 mb-4" id="tag-filters">
            <button 
                class="tag-filter active flex items-center justify-center px-3 py-1 text-sm rounded-lg bg-black text-gray-100 transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5"
                data-tag="all">
                All Sessions
            </button>
            {allTags.map(tag => (
                <button 
                    class="tag-filter flex items-center justify-center px-3 py-1 text-sm rounded-lg bg-black text-gray-100 transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5"
                    data-tag={tag}>
                    #{tag}
                </button>
            ))}
        </div>
        
        <div id="no-results" class="hidden py-4 text-center text-gray-400">
            No speaking engagements found for the selected tag.
        </div>
    </div>
</div>

<script>
    // Import our shared tag filtering utility
    import { setupTagFiltering } from '../utils/filtering';
    
    // Set up tag filtering when the DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        // Get the initialization function with our config
        const initializeFiltering = setupTagFiltering({
            tagButtonsSelector: '.tag-filter',
            itemsSelector: '.speaking-card',
            noResultsSelector: 'no-results',
            dataAttribute: 'data-tags',
            allTagValue: 'all'
        });
        
        // Call the initialization function when DOM is ready
        initializeFiltering();
        
        // Additional custom filtering logic for section-specific visibility
        const tagButtons = document.querySelectorAll('.tag-filter');
        const upcomingCards = document.querySelectorAll('#upcoming-engagements .speaking-card');
        const pastCards = document.querySelectorAll('#past-engagements .speaking-card');
        const noUpcomingDefault = document.getElementById('no-upcoming-default');
        const noUpcomingResults = document.getElementById('no-upcoming-results');
        const noPastResults = document.getElementById('no-past-results');
        const allButton = document.querySelector('.tag-filter[data-tag="all"]');
        
        // Function to update section-specific visibility
        function updateSectionVisibility(selectedTag) {
            // Check visibility of upcoming section cards
            let visibleUpcoming = 0;
            upcomingCards.forEach(card => {
                if (window.getComputedStyle(card).display !== 'none') {
                    visibleUpcoming++;
                }
            });
            
            // Check visibility of past section cards
            let visiblePast = 0;
            pastCards.forEach(card => {
                if (window.getComputedStyle(card).display !== 'none') {
                    visiblePast++;
                }
            });
            
            // Only show the default "no upcoming" message when on "All" filter and there are no upcoming events
            if (noUpcomingDefault) {
                if (selectedTag === 'all') {
                    // For "All" filter, show the default message if there are no upcoming events
                    noUpcomingDefault.classList.toggle('hidden', visibleUpcoming > 0);
                } else {
                    // For specific tag filters, always hide the default message
                    noUpcomingDefault.classList.add('hidden');
                }
            }
            
            // For filter-specific no results messages, show them only when filtering by a specific tag
            if (noUpcomingResults) {
                noUpcomingResults.classList.toggle('hidden', visibleUpcoming > 0 || selectedTag === 'all');
            }
            
            if (noPastResults) {
                noPastResults.classList.toggle('hidden', visiblePast > 0 || selectedTag === 'all');
            }
        }
        
        // Set up event listeners for filter buttons
        tagButtons.forEach(button => {
            button.addEventListener('click', () => {
                const selectedTag = button.getAttribute('data-tag');
                if (!selectedTag) return;
                
                updateSectionVisibility(selectedTag);
            });
        });
        
        // Initialize the visibility based on default "All" selection
        if (allButton) {
            updateSectionVisibility('all');
        }
    });
</script>

<style>
    /* Ensure consistent styling for tag spans */
    .tag-span {
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }
</style>