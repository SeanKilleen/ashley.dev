---
// Import from Astro's Content Collections API
import { getCollection } from 'astro:content';

// Get all blog posts from the "posts" collection
const allPosts = await getCollection('posts');

// Sort posts by date (newest first)
const sortedPosts = allPosts.sort((a: any, b: any) => {
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

// Function to extract a preview from the markdown content
function extractPreview(content: string, maxLength: number = 150): string {
  // Remove frontmatter if present (shouldn't be needed but just to be safe)
  const contentWithoutFrontmatter = content.replace(/^---(.|\n)*?---/, '').trim();
  
  // Remove Markdown headings, links, images, and other formatting
  const plainText = contentWithoutFrontmatter
    .replace(/#+\s(.*)/g, '$1') // Remove headings
    .replace(/!\[(.*?)\]\((.*?)\)/g, '') // Remove images
    .replace(/\[(.*?)\]\((.*?)\)/g, '$1') // Convert links to just their text
    .replace(/(\*\*|__)(.*?)(\*\*|__)/g, '$2') // Remove bold
    .replace(/(\*|_)(.*?)(\*|_)/g, '$2') // Remove italic
    .replace(/\n/g, ' ') // Replace newlines with spaces
    .trim();
  
  // Truncate to maxLength and add ellipsis if needed
  if (plainText.length > maxLength) {
    return plainText.substring(0, maxLength) + '...';
  }
  
  return plainText;
}

// Extract all unique tags from blog posts
const allTags = [...new Set(sortedPosts.flatMap(post => post.data.tags || []))].sort();
---

<div>
    <div class="grid grid-cols-1 gap-6 mb-10">
        {sortedPosts.length === 0 ? (
            <div class="flex flex-col justify-center items-start border border-gray-700 rounded-lg p-6 bg-black">
                <p class="text-gray-400">No blog posts found. Make sure your content collection is properly set up.</p>
            </div>
        ) : (
            sortedPosts.map((post, index) => {
                const preview = extractPreview(post.body);
                return (
                <div class="flex flex-col justify-center items-start border border-gray-700 rounded-lg p-6 bg-black blog-post" data-tags={post.data.tags?.join(',')}>
                    <div class="w-full">
                        <a 
                            href={`/posts/${post.data.slug || post.slug}`}
                            class="text-white hover:text-primary"
                        >
                            <h3 class="text-xl font-semibold mb-2">{post.data.title}</h3>
                        </a>
                        <p class="text-sm text-gray-400">{post.data.date.toString()}</p>
                    </div>
                    
                    <!-- Tags display -->
                    <div class="flex flex-wrap gap-1 mt-2 mb-4">
                        {post.data.tags?.map(tag => (
                            <span class="tag-span inline-flex items-center justify-center px-2 py-1 text-xs rounded-lg bg-black text-gray-100 cursor-pointer transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5">
                                #{tag}
                            </span>
                        ))}
                    </div>
                    
                    {/* Post preview */}
                    <div class="text-gray-300 mb-4 mt-2">
                        <p>{preview}</p>
                    </div>
                    
                    <a 
                        href={`/posts/${post.data.slug || post.slug}`}
                        class="px-4 py-2.5 mt-2 text-center border border-gray-600 rounded-lg hover:text-primary hover:border-primary"
                    >
                        Read More
                    </a>
                </div>
                )
            })
        )}
    </div>
    
    <!-- No results message -->
    <div id="no-results" class="hidden py-4 text-center text-gray-400">
        No posts found for the selected tag.
    </div>
    
    <!-- Tag filter section -->
    <div class="mt-10 pt-6 border-t border-gray-700">
        <h3 class="text-xl font-semibold text-white mb-4">Filter by Tags</h3>
        <div class="flex flex-wrap gap-2" id="tag-filters">
            <button class="tag-filter active flex items-center justify-center px-3 py-1 text-sm rounded-lg bg-black text-gray-100 transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5" data-tag="all">
                All Posts
            </button>
            {allTags.map(tag => (
                <button class="tag-filter flex items-center justify-center px-3 py-1 text-sm rounded-lg bg-black text-gray-100 transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5" data-tag={tag}>
                    #{tag}
                </button>
            ))}
        </div>
    </div>
</div>

<script>
    // Import our shared tag filtering utility
    import { setupTagFiltering } from '../utils/filtering';
    
    // Set up tag filtering when the DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        // Get the initialization function with our config
        const initializeFiltering = setupTagFiltering({
            tagButtonsSelector: '.tag-filter',
            itemsSelector: '.blog-post',
            noResultsSelector: '#no-results',
            dataAttribute: 'data-tags',
            allTagValue: 'all'
        });
        
        // Call the initialization function when DOM is ready
        initializeFiltering();
    });
</script>

<style>
/* Override the hidden class from the global styles */
.blog-post .hidden {
    display: none;
}
</style>
