---
// Import from Astro's Content Collections API
import { getCollection } from 'astro:content';

// Get all blog posts from the "posts" collection
const allPosts = await getCollection('posts');

// Sort posts by date (newest first)
const sortedPosts = allPosts.sort((a, b) => {
  return new Date(b.data.date) - new Date(a.data.date);
});
---

<div class="blog-container">
    
    <ul class="space-y-6" id="blog-posts-container">
        {sortedPosts.length === 0 ? (
            <li class="border border-gray-700 rounded-lg p-4 bg-black">
                <p class="text-gray-400">No blog posts found. Make sure your content collection is properly set up.</p>
            </li>
        ) : (
            sortedPosts.map((post, index) => (
                <li class="border border-gray-700 rounded-lg p-4 bg-black blog-post" data-tags={post.data.tags?.join(',')}>
                    <button 
                        class="text-primary hover:underline w-full text-left"
                        data-index={index}
                    >
                        <h2 class="text-xl font-bold">{post.data.title}</h2>
                    </button>
                    <p class="text-sm text-gray-400">{post.data.date.toString()}</p>
                    
                    <!-- Tags display -->
                    <div class="flex flex-wrap gap-1 mt-2">
                        {post.data.tags?.map(tag => (
                            <span class="inline-block px-2 py-1 text-xs rounded-lg bg-black text-gray-100 cursor-pointer transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5">
                                #{tag}
                            </span>
                        ))}
                    </div>
                    
                    <div id={`content-${index}`} class="hidden mt-2 text-gray-300 prose prose-invert">
                        {async () => {
                            const { Content } = await post.render();
                            return <Content />;
                        }}
                    </div>
                </li>
            ))
        )}
    </ul>
    
    <!-- No results message -->
    <div id="no-results" class="hidden py-4 text-center text-gray-400">
        No posts found for the selected tag.
    </div>
    
    <!-- Tag filter section -->
    <div class="mt-10 pt-6 border-t border-gray-600">
        <h2 class="text-xl font-bold mb-2">Filter by Tags</h2>
        <div class="flex flex-wrap gap-2" id="tag-filters">
            <button class="tag-filter active flex items-center justify-center px-3 py-1 text-sm rounded-lg bg-black text-gray-100 transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5" data-tag="all">
                All Posts
            </button>
            {[...new Set(sortedPosts.flatMap(post => post.data.tags || []))].sort().map(tag => (
                <button class="tag-filter flex items-center justify-center px-3 py-1 text-sm rounded-lg bg-black text-gray-100 transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5" data-tag={tag}>
                    #{tag}
                </button>
            ))}
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Content toggle functionality
        const contentButtons = document.querySelectorAll('.blog-post button[data-index]');
        contentButtons.forEach(button => {
            button.addEventListener('click', () => {
                const index = button.getAttribute('data-index');
                const content = document.getElementById(`content-${index}`);
                
                if (content) {
                    content.classList.toggle('hidden');
                }
            });
        });
        
        // Tag filtering functionality
        const tagButtons = document.querySelectorAll('.tag-filter');
        const blogPosts = document.querySelectorAll('.blog-post');
        const noResultsMessage = document.getElementById('no-results');
        
        tagButtons.forEach(button => {
            button.addEventListener('click', () => {
                // Update active state for buttons
                tagButtons.forEach(btn => {
                    btn.classList.remove('active');
                    btn.classList.remove('bg-primary');
                    btn.classList.add('bg-black');
                });
                button.classList.add('active');
                button.classList.remove('bg-black');
                button.classList.add('bg-primary');
                
                const selectedTag = button.getAttribute('data-tag');
                
                let visibleCount = 0;
                
                // Filter the posts based on selected tag
                blogPosts.forEach(post => {
                    const postTags = post.getAttribute('data-tags')?.split(',') || [];
                    
                    if (selectedTag === 'all' || postTags.includes(selectedTag)) {
                        post.style.display = 'block';
                        visibleCount++;
                    } else {
                        post.style.display = 'none';
                    }
                });
                
                // Show/hide no results message
                if (visibleCount === 0) {
                    noResultsMessage.classList.remove('hidden');
                } else {
                    noResultsMessage.classList.add('hidden');
                }
            });
        });
        
        // Make tag spans clickable to filter
        const tagSpans = document.querySelectorAll('.blog-post span');
        tagSpans.forEach(span => {
            span.addEventListener('click', () => {
                // Extract tag name without the # symbol
                const tagName = span.textContent.substring(1);
                // Find and click the corresponding filter button
                const tagButton = document.querySelector(`.tag-filter[data-tag="${tagName}"]`);
                if (tagButton) {
                    tagButton.click();
                    // Scroll down to the tag filters
                    document.getElementById('tag-filters').scrollIntoView({ behavior: 'smooth' });
                }
            });
        });
        
        // Initialize the "All Posts" button as pink
        const allPostsButton = document.querySelector('.tag-filter[data-tag="all"]');
        if (allPostsButton) {
            allPostsButton.classList.remove('bg-black');
            allPostsButton.classList.add('bg-primary');
        }
    });
</script>

<style>
/* Override the hidden class from the global styles */
.blog-post .hidden {
    display: none;
}
</style>